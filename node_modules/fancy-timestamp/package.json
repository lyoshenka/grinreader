{
  "name": "fancy-timestamp",
  "version": "0.0.3",
  "author": {
    "name": "taterbase",
    "email": "taterbase@gmail.com",
    "url": "http://github.com/taterbase/fancy-timestamp"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/taterbase/fancy-timestamp.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "timestamp",
    "fancy",
    "fancy timestamp",
    "natural",
    "english"
  ],
  "description": "Create natural language from UNIX timestamps",
  "engine": {
    "node": ">= 0.6.0"
  },
  "main": "index.js",
  "readme": "#Fancy Timestamp\n\nUse this to create natural language for your unix timestamps (similar to Facebook's)\n\nPlays well with [browserify](https://github.com/substack/node-browserify)\n\n#Usage\nInstall with NPM and require where needed.\n```bash\nnpm install fancy-timestamp\n```\n```javascript\nvar fancyTimestamp = require('fancy-timestamp');\n```\nFancy Timestamp can accept normal timestamps composed of seconds.\n```javascript\nvar normalTimestamp = 1342123755; //Using only seconds\n\nvar fancyTimestampString = fancyTimestamp(normalTimestamp); // result == \"8 minutes ago\"\n```\nIt can also accept timestamps composed of milliseconds such as the ones JavaScript defaults to. To parse millisecond timestamps pass a second parameter of 'true'.\n```javascript\nvar javascriptTimestamp = (new Date()).getTime(); //Using JavaScript's timestamp composed of milliseconds\n\nfancyTimestampString = fancyTimestamp(javascriptTimestamp, true); // result == \"Just Now!\"\n```\n\n#License\n<a href=\"http://www.opensource.org/licenses/mit-license.php/\">MIT license</a>",
  "_id": "fancy-timestamp@0.0.3",
  "dist": {
    "shasum": "1402892c81cf8de3fb3d65e92705c8f743a2fc8d"
  },
  "_from": "fancy-timestamp"
}
